
service docker restart
root@csst-06:/home/ubuntu/laspdev# mn --clean
*** Removing excess controllers/ofprotocols/ofdatapaths/pings/noxes
killall controller ofprotocol ofdatapath ping nox_corelt-nox_core ovs-openflowd ovs-controllerovs-testcontroller udpbwtest mnexec ivs ryu-manager 2> /dev/null
killall -9 controller ofprotocol ofdatapath ping nox_corelt-nox_core ovs-openflowd ovs-controllerovs-testcontroller udpbwtest mnexec ivs ryu-manager 2> /dev/null
pkill -9 -f "sudo mnexec"
*** Removing junk from /tmp
rm -f /tmp/vconn* /tmp/vlogs* /tmp/*.out /tmp/*.log
*** Removing old X11 tunnels
*** Removing excess kernel datapaths
ps ax | egrep -o 'dp[0-9]+' | sed 's/dp/nl:/'
***  Removing OVS datapaths
ovs-vsctl --timeout=1 list-br
ovs-vsctl --timeout=1 list-br
*** Removing all links of the pattern foo-ethX
ip link show | egrep -o '([-_.[:alnum:]]+-eth[[:digit:]]+)'
ip link show
*** Killing stale mininet node processes
pkill -9 -f mininet:
*** Shutting down stale tunnels
pkill -9 -f Tunnel=Ethernet
pkill -9 -f .ssh/mn
rm -f ~/.ssh/mn/*
***  Removing SAP NAT rules
*** Cleanup complete.
root@csst-06:/home/ubuntu/laspdev# python3 build_topo.py base
*** Adding controller
*** Adding docker containers
CHOSEN IMAGE vinayaktj/lasp:base
node_objects[d6] = net.addDocker(d6, ip=11.0.0.12, dimage=chosen_image)
1: 
node_objects[d4] = net.addDocker(d4, ip=10.0.0.14, dimage=chosen_image)
1: 
vinayaktj/lasp; base; None; sha256:d88c739cf1b91194d1a32a2a380883ac966fd67ec6b583756a97d96c49d63896
d6: kwargs {'ip': '11.0.0.12'}
vinayaktj/lasp; base; None; sha256:d88c739cf1b91194d1a32a2a380883ac966fd67ec6b583756a97d96c49d63896
d4: kwargs {'ip': '10.0.0.14'}
d4: update resources {'cpu_quota': -1}
d6: update resources {'cpu_quota': -1}
node_objects[d7] = net.addDocker(d7, ip=11.0.0.13, dimage=chosen_image)
1: 
node_objects[d2] = net.addDocker(d2, ip=10.0.0.12, dimage=chosen_image)
1: 
vinayaktj/lasp; base; None; sha256:d88c739cf1b91194d1a32a2a380883ac966fd67ec6b583756a97d96c49d63896
d7: kwargs {'ip': '11.0.0.13'}
vinayaktj/lasp; base; None; sha256:d88c739cf1b91194d1a32a2a380883ac966fd67ec6b583756a97d96c49d63896
d2: kwargs {'ip': '10.0.0.12'}
d7: update resources {'cpu_quota': -1}
d2: update resources {'cpu_quota': -1}
node_objects[d5] = net.addDocker(d5, ip=11.0.0.11, dimage=chosen_image)
1: 
node_objects[d3] = net.addDocker(d3, ip=10.0.0.13, dimage=chosen_image)
1: 
vinayaktj/lasp; base; None; sha256:d88c739cf1b91194d1a32a2a380883ac966fd67ec6b583756a97d96c49d63896
d5: kwargs {'ip': '11.0.0.11'}
vinayaktj/lasp; base; None; sha256:d88c739cf1b91194d1a32a2a380883ac966fd67ec6b583756a97d96c49d63896
d3: kwargs {'ip': '10.0.0.13'}
d3: update resources {'cpu_quota': -1}
d5: update resources {'cpu_quota': -1}
node_objects[d8] = net.addDocker(d8, ip=11.0.0.14, dimage=chosen_image)
1: 
node_objects[d1] = net.addDocker(d1, ip=10.0.0.11, dimage=chosen_image)
1: 
vinayaktj/lasp; base; None; sha256:d88c739cf1b91194d1a32a2a380883ac966fd67ec6b583756a97d96c49d63896
d8: kwargs {'ip': '11.0.0.14'}
vinayaktj/lasp; base; None; sha256:d88c739cf1b91194d1a32a2a380883ac966fd67ec6b583756a97d96c49d63896
d1: kwargs {'ip': '10.0.0.11'}
d8: update resources {'cpu_quota': -1}
d1: update resources {'cpu_quota': -1}
*** Adding switches
cluster_swithc[cluster2] = net.addSwitch(s2
cluster_swithc[cluster1] = net.addSwitch(s1
*** Creating links
cluster_switch['cluster1'] =s1 r0-eth1 ip:10.0.0.10/8
net.addLink cluster_switch[cluster1]),router, intfName2= 'r0-eth1, params2={'ip':'10.0.0.10/8
cluster_switch['cluster2'] =s2 r0-eth2 ip:11.0.0.10/8
net.addLink cluster_switch[cluster2]),router, intfName2= 'r0-eth2, params2={'ip':'11.0.0.10/8
net.addLink(node_objectsd6__d6, s2, delay='50ms', bw=1)
net.addLink(node_objectsd7__d7, s2, delay='50ms', bw=1)
net.addLink(node_objectsd5__d5, s2, delay='50ms', bw=1)
net.addLink(node_objectsd8__d8, s2, delay='50ms', bw=1)
net.addLink(node_objectsd4__d4, s1, delay='50ms', bw=1)
net.addLink(node_objectsd2__d2, s1, delay='50ms', bw=1)
net.addLink(node_objectsd3__d3, s1, delay='50ms', bw=1)
net.addLink(node_objectsd1__d1, s1, delay='50ms', bw=1)
*** Starting network
*** Configuring hosts
d6 d4 d7 d2 d5 d3 d8 d1 r0 
*** Starting controller
c0 
*** Starting 2 switches
s2 s1 ...
*** Testing connectivity
net.ping([<Docker d6: d6-eth0:11.0.0.12 pid=29145> , <Docker d7: d7-eth0:11.0.0.13 pid=29391> , <Docker d5: d5-eth0:11.0.0.11 pid=29649> , <Docker d8: d8-eth0:11.0.0.14 pid=29893> ])
d6 -> d7 d5 d8 
d7 -> d6 d5 d8 
d5 -> d6 d7 d8 
d8 -> d6 d7 d5 
*** Results: 0% dropped (12/12 received)
net.ping([<Docker d4: d4-eth0:10.0.0.14 pid=29147> , <Docker d2: d2-eth0:10.0.0.12 pid=29403> , <Docker d3: d3-eth0:10.0.0.13 pid=29647> , <Docker d1: d1-eth0:10.0.0.11 pid=29911> ])
d4 -> d2 d3 d1 
d2 -> d4 d3 d1 
d3 -> d4 d2 d1 
d1 -> d4 d2 d3 
*** Results: 0% dropped (12/12 received)
d5 -> d1 
d1 -> d5 
*** Results: 0% dropped (2/2 received)
*** Starting Screen Sessions 
screen -t command cluster2 for node d6
screen -t command cluster1 for node d4
screen -t command cluster1 for node d2
screen -t command cluster2 for node d7
screen -t command cluster1 for node d3
screen -t command cluster2 for node d5
screen -t command cluster1 for node d1
screen -t command cluster2 for node d8
*** Running CLI
*** Starting CLI:
containernet> 